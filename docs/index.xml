<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>I'm Eric, and I'm a developer</title><link>/</link><description>Recent content on I'm Eric, and I'm a developer</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Fri, 22 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Functional JavaScript with promises</title><link>/blog/functional-javascript-with-promises/</link><pubDate>Fri, 22 Jan 2021 00:00:00 +0000</pubDate><guid>/blog/functional-javascript-with-promises/</guid><description>Functional programming is awesome. It makes code easy to reason about and easy to test. It promotes the use of good code structuring. Unfortunately for web developers, JavaScript is not functional. The pipeline operator proposal would bring a little bit of functionality, but it is far from here.
Enter Promises There is one very well supported language feature that can behave like a pipeline: Promises. Just pass in a value and chain some functions.</description></item><item><title>Your website is not an app üôÑ</title><link>/blog/your-website-is-not-an-app/</link><pubDate>Fri, 04 Dec 2020 00:00:00 +0000</pubDate><guid>/blog/your-website-is-not-an-app/</guid><description>We made everything too complicated. We do this, us developers. It&amp;rsquo;s fun to invent a new and better way to do things. And to use all the &amp;ldquo;new things&amp;rdquo;. But I think this is the time to stop and think about what we are doing. One of those things is treating every website like an app - although most sites are nothing of the sort.
The web was designed for documents The World Wide Web (www) was designed to be a collection of documents that could be linked together.</description></item><item><title>Web vitals real user monitoring with Elasticsearch and Kibana</title><link>/blog/rum-with-elk/</link><pubDate>Fri, 05 Jun 2020 00:00:00 +0000</pubDate><guid>/blog/rum-with-elk/</guid><description>Elasticsearch is awesome. I had it on my &amp;ldquo;things to learn&amp;rdquo; list for quite a while, and I finally got to it when an ecommerce site I&amp;rsquo;m working on needed some real user monitoring (RUM) to make sure performance stays superb. This is the story of how easy this was to set up with Elasticsearch and Kibana (ELK - or at least EK).
Web vitals is a term for some new metrics surrounding site usability.</description></item><item><title/><link>/experiments/castme/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/experiments/castme/readme/</guid><description>Google Cast demo Google Cast is pretty cool. Especially Chromecast, of course. You can cast pretty much any media on this super cheap device. But even better, you can build your own apps that run on the Chromecast.
To build an app, you need to create:
A &amp;ldquo;sender&amp;rdquo; app which controls the casting A &amp;ldquo;receiver&amp;rdquo; app that runs on the Chromecast Also, to test all of this in development, you need to register your device for development (super easy!</description></item><item><title/><link>/experiments/dragger/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/experiments/dragger/readme/</guid><description>dragger A study in dragging and dropping in the browser.</description></item><item><title/><link>/experiments/editmyfile/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/experiments/editmyfile/readme/</guid><description>Simple text editor This is a test of the Filesystem API. It&amp;rsquo;s a very simple text editor. Use at your own risk&amp;hellip; üòè
The Filesystem API is freaking amazing. With it you can magically open local files and also save them back! The API is in &amp;ldquo;Origin trial&amp;rdquo; from Chrome 78 onwards, and available as a flag in previous versions.
The API is pretty damn cool, if you ask me. This is a quite nice looking text editor with a contenteditable pre tag, and the code is not many lines long.</description></item><item><title/><link>/experiments/myday/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/experiments/myday/readme/</guid><description>Myday See your Google calendar events for today.
Working domain
Requirements Google Cloud Platform project with Calendar API enabled API key and OAuth client for the project Private top-level domain for hosting (see note below) Note: You need to authorize the OAuth client for a particular URL. This URL needs to be on a whitelisted domain, which in turn needs to be a private top-level domain.
This project also showcases using Google Sign-In to request for additional permissions on demand (incremental authorization).</description></item><item><title/><link>/experiments/weather/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/experiments/weather/readme/</guid><description>PWA Weather App An installable PWA that shows todays weather compared to yesterday.</description></item><item><title/><link>/thoughts-on-organizing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/thoughts-on-organizing/</guid><description>Thougts on how to organize work 1.6.2020: Not a super good day. Tomorrow, more focus on what is needed: clearer next steps and clearer structure on how the solution should look. Do not use Google tasks in the future. Also, some way to get Outlook events to the main calendar is needed.
2.6.2020: Pretty ok today. Good to have pomodoros and clear next steps written down. Also, don&amp;rsquo;t do many things simultaneously.</description></item><item><title/><link>/today-i-learned/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/today-i-learned/</guid><description>Gotchas when using custom elements in production HTML and CSS needs to be included somehow. The best case is to have the html &amp;ldquo;template&amp;rdquo; ready the way it should look, and then just define the custom element, but for encapsulation and usage in other frameworks, you might consider:
External file(s): loading the HTML via a loader (webpack / parcel / etc) Inside JS: use template strings in the js file, possibly with an IDE plugin for language services Remember, global css doesn&amp;rsquo;t work inside a shadow root.</description></item></channel></rss>